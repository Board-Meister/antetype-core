var s=(t=>(t.INIT="antetype.init",t.CLOSE="antetype.close",t.DRAW="antetype.draw",t.CALC="antetype.calc",t.RECALC_FINISHED="antetype.recalc.finished",t.MODULES="antetype.modules",t.SETTINGS="antetype.settings.definition",t))(s||{}),r=class{#t;#i=null;#e=null;#n=null;static inject={minstrel:"boardmeister/minstrel",herald:"boardmeister/herald"};inject(e){this.#t=e}async#r(e,n){if(!this.#e){let i=this.#t.minstrel.getResourceUrl(this,"core.js");this.#i=(await import(i)).default;let o=this.#i({canvas:n,modules:e,injected:this.#t});this.#e=o.module,this.#n=o.internal}return this.#e}async register(e){let{modules:n,canvas:i}=e.detail;n.core=await this.#r(n,i)}init(e){if(!this.#e||!this.#n)throw new Error("Instance not loaded, trigger registration event first");let{base:n,settings:i}=e.detail;return this.#n.init(n,i)}async cloneDefinitions(e){if(!this.#e)throw new Error("Instance not loaded, trigger registration event first");e.detail.element!==null&&(e.detail.element=await this.#e.clone.definitions(e.detail.element))}setSettings(e){this.#e.setting.setSettingsDefinition(e)}static subscriptions={"antetype.modules":"register","antetype.init":"init","antetype.settings.definition":"setSettings","antetype.calc":[{method:"cloneDefinitions",priority:-255}]}},a=r,d=a;export{r as AntetypeCore,s as Event,d as default};
